package edu.miracosta.cs134.model;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class DBHelper extends SQLiteOpenHelper
{
    public static final String TAG = DBHelper.class.getSimpleName();


    //STEP 1) define all the database info in CONSTANTS
    public static final String DATABASE_NAME = "ToDo2Day";
    public static final String DATABASE_TABLE = "Tasks";
    public static final String FIELD_PRIMARY_KEY = "_id";
    public static final String FIELD_DESCRIPTION = "description";
    public static final String FIELD_IS_DONE = "is_Done";



    public DBHelper(Context context)
    {
        super(context, DATABASE_NAME, null, 1);



    }


    @Override
    public void onCreate(SQLiteDatabase db)
    {
        //create all of our data base tables
        // 1) Determine whether to read or write the database (CREATE = write)
        //opens a writeable connection to the todo2day database
        db = getWritableDatabase();


        String sql = "CREATE TABLE IF NOT EXISTS " + DATABASE_TABLE + "(" +  FIELD_PRIMARY_KEY
                + " INTEGER PRIMARY KEY," + FIELD_DESCRIPTION + " TEXT," + FIELD_IS_DONE +
                " INTEGER" + ")";


        //log the SQL string
        Log.i(TAG, sql);

        //execute the create table statement
        db.execSQL(sql);




        db.close();
    }


    //method to add a task to the database
    //corresponds to an insert operation
    public void addTask(Task task)
    {
        //do not grab the id (-1) let the database assign it
        String description = task.getDescription();
        boolean isDone = task.isDone();

        //ContentValues is a keey/value mapping
        ContentValues values = new ContentValues();
        values.put(FIELD_DESCRIPTION, description);
        values.put(FIELD_IS_DONE, isDone ? 1 : 0);

        //get a reference to the database (readable or writable?)
        //writeable
        SQLiteDatabase db = getWritableDatabase();

        //adds a new record to the database
        long id = db.insert(DATABASE_TABLE, null, values);
        //after adding the new task, set its id to the one generated by the database
        task.setId(id);


        //close the database
        db.close();


    }

    //method to get all the tasks existing in the database
    public List<Task> getAllTasks()
    {
        //construct and empty list
        List <Task> allTasks = new ArrayList<>();

        //fill it from the database
        SQLiteDatabase db = getReadableDatabase();

        //make a query tp extract everything!
        //Query results in SQLite are Cursor objects
        Cursor cursor = db.query(DATABASE_TABLE,
                new String[] {FIELD_PRIMARY_KEY, FIELD_DESCRIPTION, FIELD_IS_DONE},
                null,
                null,
                null,
                null,
                null);

        //loop through the cursor results, one at a time
        //create Task objects and add them to the List
        //First determine if there are results
        if(cursor.moveToFirst())
        {
            do{
                Task task = new Task(cursor.getLong(0), cursor.getString(1),
                        cursor.getInt(2) == 1);

                allTasks.add(task);


            }while(cursor.moveToNext());


        }

        //remember to close the cursor first
        cursor.close();

        //close the database second
        db.close();

        //return it
        return allTasks;


    }


    public void clearAllTasks()
    {
        SQLiteDatabase db = getWritableDatabase();
        db.delete(DATABASE_TABLE, null, null);
        //table is cleared but not destroyed

        db.close();
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)
    {

    }
}
